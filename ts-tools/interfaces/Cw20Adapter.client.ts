/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  Binary,
  Addr,
  QueryMsg,
  ArrayOfCoin,
  Coin,
} from "./Cw20Adapter.types";
export interface Cw20AdapterReadOnlyInterface {
  contractAddress: string;
  newDenomFee: () => Promise<ArrayOfCoin>;
}
export class Cw20AdapterQueryClient implements Cw20AdapterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.newDenomFee = this.newDenomFee.bind(this);
  }

  newDenomFee = async (): Promise<ArrayOfCoin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      new_denom_fee: {},
    });
  };
}
export interface Cw20AdapterInterface extends Cw20AdapterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  redeemAndTransfer: (
    {
      recipient,
    }: {
      recipient?: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateMetadata: (
    {
      addr,
    }: {
      addr: Addr;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  registerRG: (
    {
      addr,
    }: {
      addr: Addr;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class Cw20AdapterClient
  extends Cw20AdapterQueryClient
  implements Cw20AdapterInterface
{
  override client: SigningCosmWasmClient;
  sender: string;
  override contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.redeemAndTransfer = this.redeemAndTransfer.bind(this);
    this.updateMetadata = this.updateMetadata.bind(this);
    this.registerRG = this.registerRG.bind(this);
  }

  receive = async (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {
          amount,
          msg,
          sender,
        },
      },
      fee,
      memo,
      funds
    );
  };
  redeemAndTransfer = async (
    {
      recipient,
    }: {
      recipient?: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        redeem_and_transfer: {
          recipient,
        },
      },
      fee,
      memo,
      funds
    );
  };
  updateMetadata = async (
    {
      addr,
    }: {
      addr: Addr;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_metadata: {
          addr,
        },
      },
      fee,
      memo,
      funds
    );
  };
  registerRG = async (
    {
      addr,
    }: {
      addr: Addr;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        register_r_g: {
          addr,
        },
      },
      fee,
      memo,
      funds
    );
  };
}
