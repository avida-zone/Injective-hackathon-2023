{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Transfer is a base message to move tokens to another account without triggering actions",
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "type": "object",
          "required": [
            "amount",
            "proof",
            "recipient"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "proof": {
              "$ref": "#/definitions/WProof"
            },
            "recipient": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burn is a base message to destroy tokens forever",
      "type": "object",
      "required": [
        "burn"
      ],
      "properties": {
        "burn": {
          "type": "object",
          "required": [
            "amount",
            "proof"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "proof": {
              "$ref": "#/definitions/WProof"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Send is a base message to transfer tokens to a contract and trigger an action on the receiving contract.",
      "type": "object",
      "required": [
        "send"
      ],
      "properties": {
        "send": {
          "type": "object",
          "required": [
            "amount",
            "contract",
            "msg",
            "proof"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "contract": {
              "type": "string"
            },
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "proof": {
              "$ref": "#/definitions/WProof"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Only with the \"mintable\" extension. If authorized, creates amount new tokens and adds to the minter balance.",
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "amount",
            "proof",
            "recipient"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "proof": {
              "$ref": "#/definitions/WProof"
            },
            "recipient": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Only with the \"marketing\" extension. If authorized, updates marketing metadata. Setting None/null for any of these will leave it unchanged. Setting Some(\"\") will clear this field on the contract storage",
      "type": "object",
      "required": [
        "update_marketing"
      ],
      "properties": {
        "update_marketing": {
          "type": "object",
          "properties": {
            "description": {
              "description": "A longer description of the token and it's utility. Designed for tooltips or such",
              "type": [
                "string",
                "null"
              ]
            },
            "marketing": {
              "description": "The address (if any) who can update this data structure",
              "type": [
                "string",
                "null"
              ]
            },
            "project": {
              "description": "A URL pointing to the project behind this token.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "If set as the \"marketing\" role on the contract, upload a new URL, SVG, or PNG for the token",
      "type": "object",
      "required": [
        "upload_logo"
      ],
      "properties": {
        "upload_logo": {
          "$ref": "#/definitions/Logo"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BigNumberBytes": {
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "EmbeddedLogo": {
      "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
      "oneOf": [
        {
          "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
          "type": "object",
          "required": [
            "svg"
          ],
          "properties": {
            "svg": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
          "type": "object",
          "required": [
            "png"
          ],
          "properties": {
            "png": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Logo": {
      "description": "This is used for uploading logo data, or setting it in InstantiateData",
      "oneOf": [
        {
          "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
          "type": "object",
          "required": [
            "embedded"
          ],
          "properties": {
            "embedded": {
              "$ref": "#/definitions/EmbeddedLogo"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PointG1Bytes": {
      "$ref": "#/definitions/Binary"
    },
    "PointG2Bytes": {
      "$ref": "#/definitions/Binary"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "WAggregatedProof": {
      "type": "object",
      "required": [
        "c_hash",
        "c_list"
      ],
      "properties": {
        "c_hash": {
          "$ref": "#/definitions/BigNumberBytes"
        },
        "c_list": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      }
    },
    "WGroupOrderElement": {
      "type": "object",
      "required": [
        "bn_hex"
      ],
      "properties": {
        "bn_hex": {
          "type": "string"
        }
      }
    },
    "WMap": {
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          {
            "$ref": "#/definitions/BigNumberBytes"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "WNonRevocProof": {
      "description": "Converts to NonRevocProof",
      "type": "object",
      "required": [
        "c_list",
        "x_list"
      ],
      "properties": {
        "c_list": {
          "description": "Converts to NonRevocProofCList,",
          "type": "array",
          "items": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PointG1Bytes"
              }
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PointG2Bytes"
              }
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "x_list": {
          "description": "Converts to NonRevocProofXList",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WGroupOrderElement"
          }
        }
      }
    },
    "WPredicate": {
      "type": "object",
      "required": [
        "attr_name",
        "p_type",
        "value"
      ],
      "properties": {
        "attr_name": {
          "type": "string"
        },
        "p_type": {
          "$ref": "#/definitions/WPredicateType"
        },
        "value": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "WPredicateType": {
      "type": "string",
      "enum": [
        "GE",
        "LE",
        "GT",
        "LT"
      ]
    },
    "WPrimaryEqualProof": {
      "type": "object",
      "required": [
        "a_prime",
        "e",
        "m",
        "m2",
        "revealed_attrs",
        "v"
      ],
      "properties": {
        "a_prime": {
          "$ref": "#/definitions/BigNumberBytes"
        },
        "e": {
          "$ref": "#/definitions/BigNumberBytes"
        },
        "m": {
          "$ref": "#/definitions/WMap"
        },
        "m2": {
          "$ref": "#/definitions/BigNumberBytes"
        },
        "revealed_attrs": {
          "$ref": "#/definitions/WMap"
        },
        "v": {
          "$ref": "#/definitions/BigNumberBytes"
        }
      }
    },
    "WPrimaryPredicateInequalityProof": {
      "type": "object",
      "required": [
        "alpha",
        "mj",
        "predicate",
        "r",
        "t",
        "u"
      ],
      "properties": {
        "alpha": {
          "$ref": "#/definitions/BigNumberBytes"
        },
        "mj": {
          "$ref": "#/definitions/BigNumberBytes"
        },
        "predicate": {
          "$ref": "#/definitions/WPredicate"
        },
        "r": {
          "$ref": "#/definitions/WMap"
        },
        "t": {
          "$ref": "#/definitions/WMap"
        },
        "u": {
          "$ref": "#/definitions/WMap"
        }
      }
    },
    "WPrimaryProof": {
      "type": "object",
      "required": [
        "eq_proof",
        "ne_proofs"
      ],
      "properties": {
        "eq_proof": {
          "$ref": "#/definitions/WPrimaryEqualProof"
        },
        "ne_proofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WPrimaryPredicateInequalityProof"
          }
        }
      }
    },
    "WProof": {
      "type": "object",
      "required": [
        "aggregated_proof",
        "proofs"
      ],
      "properties": {
        "aggregated_proof": {
          "$ref": "#/definitions/WAggregatedProof"
        },
        "proofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSubProof"
          }
        }
      }
    },
    "WSubProof": {
      "type": "object",
      "required": [
        "primary_proof"
      ],
      "properties": {
        "non_revoc_proof": {
          "anyOf": [
            {
              "$ref": "#/definitions/WNonRevocProof"
            },
            {
              "type": "null"
            }
          ]
        },
        "primary_proof": {
          "$ref": "#/definitions/WPrimaryProof"
        }
      }
    }
  }
}
