{
  "contract_name": "avida-launchpad",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "rg_cw20_code_id"
    ],
    "properties": {
      "rg_cw20_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "launch"
        ],
        "properties": {
          "launch": {
            "type": "object",
            "required": [
              "label",
              "launch_type",
              "msg"
            ],
            "properties": {
              "label": {
                "description": "Label for the RgCw20 Contract",
                "type": "string"
              },
              "launch_type": {
                "description": "If it is a new token or transformed from existing",
                "allOf": [
                  {
                    "$ref": "#/definitions/LaunchType"
                  }
                ]
              },
              "msg": {
                "description": "Details for the RgCw20 Contract",
                "allOf": [
                  {
                    "$ref": "#/definitions/InstantiateMsg"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "amount",
              "proof",
              "rg_token_addr"
            ],
            "properties": {
              "amount": {
                "description": "The amount to be minted",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "proof": {
                "description": "The proof to be verified",
                "allOf": [
                  {
                    "$ref": "#/definitions/WProof"
                  }
                ]
              },
              "rg_token_addr": {
                "description": "The rgToken to be minted",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transform"
        ],
        "properties": {
          "transform": {
            "type": "object",
            "required": [
              "proof",
              "rg_token_addr"
            ],
            "properties": {
              "proof": {
                "description": "The proof to be verified",
                "allOf": [
                  {
                    "$ref": "#/definitions/WProof"
                  }
                ]
              },
              "rg_token_addr": {
                "description": "The rgToken to be transformed into",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "revert"
        ],
        "properties": {
          "revert": {
            "type": "object",
            "required": [
              "amount",
              "recipient"
            ],
            "properties": {
              "amount": {
                "description": "The amount to revert to non-rgToken",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "recipient": {
                "description": "The recipient (unchecked since non-rg)",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_verifier"
        ],
        "properties": {
          "update_verifier": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "The address of the verifier",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_adapter"
        ],
        "properties": {
          "update_adapter": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "The address of the TG Adapter",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_fee"
        ],
        "properties": {
          "update_fee": {
            "type": "object",
            "required": [
              "fee"
            ],
            "properties": {
              "fee": {
                "description": "The address of the TG Adapter",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_rg_token_code_id"
        ],
        "properties": {
          "update_rg_token_code_id": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The address of the TG Adapter",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "BigNumberBytes": {
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw20Coin": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "EmbeddedLogo": {
        "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
        "oneOf": [
          {
            "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
            "type": "object",
            "required": [
              "svg"
            ],
            "properties": {
              "svg": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
            "type": "object",
            "required": [
              "png"
            ],
            "properties": {
              "png": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InstantiateMarketingInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "logo": {
            "anyOf": [
              {
                "$ref": "#/definitions/Logo"
              },
              {
                "type": "null"
              }
            ]
          },
          "marketing": {
            "type": [
              "string",
              "null"
            ]
          },
          "project": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "InstantiateMsg": {
        "type": "object",
        "required": [
          "decimals",
          "initial_balances",
          "name",
          "req_params",
          "symbol",
          "trusted_issuers"
        ],
        "properties": {
          "decimals": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "initial_balances": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "marketing": {
            "anyOf": [
              {
                "$ref": "#/definitions/InstantiateMarketingInfo"
              },
              {
                "type": "null"
              }
            ]
          },
          "mint": {
            "anyOf": [
              {
                "$ref": "#/definitions/RgMinterData"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "req_params": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WSubProofReqParams"
            }
          },
          "symbol": {
            "type": "string"
          },
          "trusted_issuers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "LaunchType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "new"
            ],
            "properties": {
              "new": {
                "$ref": "#/definitions/MintOptions"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "transform"
            ],
            "properties": {
              "transform": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Logo": {
        "description": "This is used for uploading logo data, or setting it in InstantiateData",
        "oneOf": [
          {
            "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
            "type": "object",
            "required": [
              "embedded"
            ],
            "properties": {
              "embedded": {
                "$ref": "#/definitions/EmbeddedLogo"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MintOptions": {
        "type": "object",
        "required": [
          "price"
        ],
        "properties": {
          "cap": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "price": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "PointG1Bytes": {
        "$ref": "#/definitions/Binary"
      },
      "PointG2Bytes": {
        "$ref": "#/definitions/Binary"
      },
      "RgMinterData": {
        "type": "object",
        "properties": {
          "cap": {
            "description": "cap is how many more tokens can be issued by the minter",
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "minter": {
            "description": "If the contract is mintable, the minter is the launchpad",
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "WAggregatedProof": {
        "type": "object",
        "required": [
          "c_hash",
          "c_list"
        ],
        "properties": {
          "c_hash": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "c_list": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "WBTreeSet_for_String": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "WBTreeSet_for_WPredicate": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WPredicate"
        }
      },
      "WCredentialPrimaryPubKey": {
        "type": "object",
        "required": [
          "n",
          "r",
          "rctxt",
          "s",
          "z"
        ],
        "properties": {
          "n": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "r": {
            "$ref": "#/definitions/WMap"
          },
          "rctxt": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "s": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "z": {
            "$ref": "#/definitions/BigNumberBytes"
          }
        }
      },
      "WCredentialPubKey": {
        "type": "object",
        "required": [
          "p_key"
        ],
        "properties": {
          "p_key": {
            "$ref": "#/definitions/WCredentialPrimaryPubKey"
          },
          "r_key": {
            "anyOf": [
              {
                "$ref": "#/definitions/WCredentialRevocationPubKey"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "WCredentialRevocationPubKey": {
        "type": "object",
        "required": [
          "g",
          "g_dash",
          "h",
          "h0",
          "h1",
          "h2",
          "h_cap",
          "htilde",
          "pk",
          "u",
          "y"
        ],
        "properties": {
          "g": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "g_dash": {
            "$ref": "#/definitions/PointG2Bytes"
          },
          "h": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "h0": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "h1": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "h2": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "h_cap": {
            "$ref": "#/definitions/PointG2Bytes"
          },
          "htilde": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "pk": {
            "$ref": "#/definitions/PointG1Bytes"
          },
          "u": {
            "$ref": "#/definitions/PointG2Bytes"
          },
          "y": {
            "$ref": "#/definitions/PointG2Bytes"
          }
        }
      },
      "WCredentialSchema": {
        "type": "object",
        "required": [
          "attrs"
        ],
        "properties": {
          "attrs": {
            "$ref": "#/definitions/WBTreeSet_for_String"
          }
        }
      },
      "WGroupOrderElement": {
        "type": "object",
        "required": [
          "bn_hex"
        ],
        "properties": {
          "bn_hex": {
            "type": "string"
          }
        }
      },
      "WMap": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            {
              "$ref": "#/definitions/BigNumberBytes"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "WNonCredentialSchema": {
        "type": "object",
        "required": [
          "attrs"
        ],
        "properties": {
          "attrs": {
            "$ref": "#/definitions/WBTreeSet_for_String"
          }
        }
      },
      "WNonRevocProof": {
        "description": "Converts to NonRevocProof",
        "type": "object",
        "required": [
          "c_list",
          "x_list"
        ],
        "properties": {
          "c_list": {
            "description": "Converts to NonRevocProofCList,",
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PointG1Bytes"
                }
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PointG2Bytes"
                }
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          "x_list": {
            "description": "Converts to NonRevocProofXList",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WGroupOrderElement"
            }
          }
        }
      },
      "WPredicate": {
        "type": "object",
        "required": [
          "attr_name",
          "p_type",
          "value"
        ],
        "properties": {
          "attr_name": {
            "type": "string"
          },
          "p_type": {
            "$ref": "#/definitions/WPredicateType"
          },
          "value": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "WPredicateType": {
        "type": "string",
        "enum": [
          "GE",
          "LE",
          "GT",
          "LT"
        ]
      },
      "WPrimaryEqualProof": {
        "type": "object",
        "required": [
          "a_prime",
          "e",
          "m",
          "m2",
          "revealed_attrs",
          "v"
        ],
        "properties": {
          "a_prime": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "e": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "m": {
            "$ref": "#/definitions/WMap"
          },
          "m2": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "revealed_attrs": {
            "$ref": "#/definitions/WMap"
          },
          "v": {
            "$ref": "#/definitions/BigNumberBytes"
          }
        }
      },
      "WPrimaryPredicateInequalityProof": {
        "type": "object",
        "required": [
          "alpha",
          "mj",
          "predicate",
          "r",
          "t",
          "u"
        ],
        "properties": {
          "alpha": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "mj": {
            "$ref": "#/definitions/BigNumberBytes"
          },
          "predicate": {
            "$ref": "#/definitions/WPredicate"
          },
          "r": {
            "$ref": "#/definitions/WMap"
          },
          "t": {
            "$ref": "#/definitions/WMap"
          },
          "u": {
            "$ref": "#/definitions/WMap"
          }
        }
      },
      "WPrimaryProof": {
        "type": "object",
        "required": [
          "eq_proof",
          "ne_proofs"
        ],
        "properties": {
          "eq_proof": {
            "$ref": "#/definitions/WPrimaryEqualProof"
          },
          "ne_proofs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WPrimaryPredicateInequalityProof"
            }
          }
        }
      },
      "WProof": {
        "type": "object",
        "required": [
          "aggregated_proof",
          "proofs"
        ],
        "properties": {
          "aggregated_proof": {
            "$ref": "#/definitions/WAggregatedProof"
          },
          "proofs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WSubProof"
            }
          }
        }
      },
      "WRevocationKeyPublic": {
        "type": "object",
        "required": [
          "pair"
        ],
        "properties": {
          "pair": {
            "type": "string"
          }
        }
      },
      "WRevocationRegistry": {
        "type": "object",
        "required": [
          "accum"
        ],
        "properties": {
          "accum": {
            "$ref": "#/definitions/Binary"
          }
        }
      },
      "WSubProof": {
        "type": "object",
        "required": [
          "primary_proof"
        ],
        "properties": {
          "non_revoc_proof": {
            "anyOf": [
              {
                "$ref": "#/definitions/WNonRevocProof"
              },
              {
                "type": "null"
              }
            ]
          },
          "primary_proof": {
            "$ref": "#/definitions/WPrimaryProof"
          }
        }
      },
      "WSubProofReq": {
        "description": "SubProofRequest type from Libursa",
        "type": "object",
        "required": [
          "predicates",
          "revealed_attrs"
        ],
        "properties": {
          "predicates": {
            "$ref": "#/definitions/WBTreeSet_for_WPredicate"
          },
          "revealed_attrs": {
            "$ref": "#/definitions/WBTreeSet_for_String"
          }
        }
      },
      "WSubProofReqParams": {
        "type": "object",
        "required": [
          "credential_pub_key",
          "credential_schema",
          "non_credential_schema",
          "sub_proof_request"
        ],
        "properties": {
          "credential_pub_key": {
            "$ref": "#/definitions/WCredentialPubKey"
          },
          "credential_schema": {
            "$ref": "#/definitions/WCredentialSchema"
          },
          "non_credential_schema": {
            "$ref": "#/definitions/WNonCredentialSchema"
          },
          "rev_key_pub": {
            "anyOf": [
              {
                "$ref": "#/definitions/WRevocationKeyPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "rev_reg": {
            "anyOf": [
              {
                "$ref": "#/definitions/WRevocationRegistry"
              },
              {
                "type": "null"
              }
            ]
          },
          "sub_proof_request": {
            "$ref": "#/definitions/WSubProofReq"
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "registered_contracts"
        ],
        "properties": {
          "registered_contracts": {
            "type": "object",
            "required": [
              "contract_type"
            ],
            "properties": {
              "contract_type": {
                "$ref": "#/definitions/ContractType"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "verifier"
        ],
        "properties": {
          "verifier": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "adapter"
        ],
        "properties": {
          "adapter": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ContractType": {
        "type": "string",
        "enum": [
          "new",
          "transform"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "adapter": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "registered_contracts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_ContractResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContractResponse"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "ContractResponse": {
          "type": "object",
          "required": [
            "contract_address",
            "options"
          ],
          "properties": {
            "contract_address": {
              "$ref": "#/definitions/Addr"
            },
            "options": {
              "$ref": "#/definitions/LaunchpadOptions"
            }
          },
          "additionalProperties": false
        },
        "LaunchType": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "new"
              ],
              "properties": {
                "new": {
                  "$ref": "#/definitions/MintOptions"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "transform"
              ],
              "properties": {
                "transform": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "LaunchpadOptions": {
          "type": "object",
          "required": [
            "launch_type",
            "originator"
          ],
          "properties": {
            "launch_type": {
              "$ref": "#/definitions/LaunchType"
            },
            "originator": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "MintOptions": {
          "type": "object",
          "required": [
            "price"
          ],
          "properties": {
            "cap": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "price": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "verifier": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
